// Copyright 2023 Google LLC
//
// This source code is licensed under the BSD-style license found in the
// LICENSE file in the root directory of this source tree.

$assert DATATYPE == "QC4"
$assert NR % 16 == 0
$ABC = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ"
#include <assert.h>

#include <immintrin.h>

#include <xnnpack/gemm.h>


$ISA = "avx2"
$DATATYPE_SPEC = {"QC4": "f32_qc4w"}[DATATYPE]
void xnn_${DATATYPE_SPEC}_gemm${"inc" if INC else ""}_minmax_ukernel_${MR}x${NR}__${ISA}_broadcast(
    size_t mr,
    size_t nc,
    size_t kc,
    const float* restrict a,
    size_t a_stride,
    const void* restrict w,
    float* restrict c,
    size_t cm_stride,
    size_t cn_stride,
    const union xnn_f32_qc4w_minmax_params params[restrict XNN_MIN_ELEMENTS(1)])
{
  assert(mr != 0);
  assert(mr <= ${MR});
  assert(nc != 0);
  assert(kc != 0);
  assert(kc % sizeof(float) == 0);
  assert(a != NULL);
  assert(w != NULL);
  assert(c != NULL);

  const float* a0 = a;
  float* c0 = c;
  $for M in range(1, MR):
    const float* a${M} = (const float*) ((uintptr_t) a${M-1} + a_stride);
    float* c${M} = (float*) ((uintptr_t) c${M-1} + cm_stride);
    $if M % 2 == 0:
      if XNN_UNPREDICTABLE(mr <= ${M}) {
        a${M} = a${M-1};
        c${M} = c${M-1};
      }
    $elif M + 1 == MR:
      if XNN_UNPREDICTABLE(mr != ${M+1}) {
        a${M} = a${M-1};
        c${M} = c${M-1};
      }
    $else:
      if XNN_UNPREDICTABLE(mr < ${M+1}) {
        a${M} = a${M-1};
        c${M} = c${M-1};
      }
  const __m256i vminus_kernel_zero_point = _mm256_load_si256((const __m256i *) params->avx.minus_kernel_zero_point);
  const __m256i vmask = _mm256_load_si256((const __m256i *) params->avx.mask);

  do {
    $for N in range(0, NR, 8):
      __m256 vacc0x${ABC[N:N+8]} = _mm256_loadu_ps((const float*) w + ${N});
    $for M in range(1, MR):
      $for N in range(0, NR, 8):
        __m256 vacc${M}x${ABC[N:N+8]} = vacc0x${ABC[N:N+8]};
    w = (const float*) w + ${NR};

    size_t k = kc;
    for (; k >= 2 * sizeof(float); k -= sizeof(float) * 2) {
      $for L in range(2):
        $for M in range(MR):
          const __m256 va${M}c${L} = _mm256_broadcast_ss(a${M});
          a${M} += 1;

        $if L % 2 == 0:
          $for N in range(0, NR, 16):
            const __m256i vbwi${ABC[N:N+16]}c01 = _mm256_cvtepu8_epi16(_mm_load_si128((const __m128i *) ((const int8_t*) w + ${N * 2})));
            w = (const int8_t*) w + ${NR};
          $for N in range(0, NR, 16):
            const __m256i vbw${ABC[N:N+16]}c${L} = _mm256_and_si256(vbwi${ABC[N:N+16]}c01, vmask);
        $else:
          $for N in range(0, NR, 16):
            const __m256i vbw${ABC[N:N+16]}c${L} = _mm256_srli_epi16(vbwi${ABC[N:N+16]}c01, 4);
        $for N in range(0, NR, 16):
          const __m128i vbw${ABC[N+8:N+16]}c${L} = _mm256_extracti128_si256(vbw${ABC[N:N+16]}c${L}, 1);
          __m256i vbi${ABC[N:N+8]}c${L} = _mm256_cvtepu16_epi32(_mm256_castsi256_si128(vbw${ABC[N:N+16]}c${L}));
          __m256i vbi${ABC[N+8:N+16]}c${L} = _mm256_cvtepu16_epi32(vbw${ABC[N+8:N+16]}c${L});
        $for N in range(0, NR, 8):
          vbi${ABC[N:N+8]}c${L} = _mm256_add_epi32(vbi${ABC[N:N+8]}c${L}, vminus_kernel_zero_point);
        $for N in range(0, NR, 8):
          const __m256 vb${ABC[N:N+8]}c${L} = _mm256_cvtepi32_ps(vbi${ABC[N:N+8]}c${L});

        $for N in range(0, NR, 8):
          $for M in range(MR):
            vacc${M}x${ABC[N:N+8]} = _mm256_fmadd_ps(va${M}c${L}, vb${ABC[N:N+8]}c${L}, vacc${M}x${ABC[N:N+8]});
    }

    if XNN_UNLIKELY(k != 0) {
      $for M in range(MR):
        const __m256 va${M} = _mm256_broadcast_ss(a${M});
        a${M} += 1;

      $for N in range(0, NR, 16):
        const __m256i vbwi${ABC[N:N+16]}c01 = _mm256_cvtepu8_epi16(_mm_load_si128((const __m128i *) ((const int8_t*) w + ${N * 2})));
        w = (const int8_t*) w + ${NR};
      $for N in range(0, NR, 16):
        const __m256i vbw${ABC[N:N+16]} = _mm256_and_si256(vbwi${ABC[N:N+16]}c01, vmask);
      $for N in range(0, NR, 16):
        const __m128i vbw$${ABC[N+8:N+16]} = _mm256_extracti128_si256(vbw${ABC[N:N+16]}, 1);
        __m256i vbi${ABC[N:N+8]} = _mm256_cvtepu16_epi32(_mm256_castsi256_si128(vbw${ABC[N:N+16]}));
        __m256i vbi${ABC[N+8:N+16]} = _mm256_cvtepu16_epi32(vbw$${ABC[N+8:N+16]});
      $for N in range(0, NR, 8):
        vbi${ABC[N:N+8]} = _mm256_add_epi32(vbi${ABC[N:N+8]}, vminus_kernel_zero_point);
      $for N in range(0, NR, 8):
        const __m256 vb${ABC[N:N+8]} = _mm256_cvtepi32_ps(vbi${ABC[N:N+8]});

      $for N in range(0, NR, 8):
        $for M in range(MR):
          vacc${M}x${ABC[N:N+8]} = _mm256_fmadd_ps(va${M}, vb${ABC[N:N+8]}, vacc${M}x${ABC[N:N+8]});
    }

    $for N in range(0, NR, 8):
      const __m256 vscale${ABC[N:N+8]} = _mm256_loadu_ps((const float*) w + ${N});
      $for M in range(MR):
        vacc${M}x${ABC[N:N+8]} = _mm256_mul_ps(vacc${M}x${ABC[N:N+8]}, vscale${ABC[N:N+8]});
    w = (const float*) w + ${NR};
    const __m256 vmin = _mm256_load_ps(params->avx.min);
    $for N in range(0, NR, 8):
      $for M in range(MR):
        vacc${M}x${ABC[N:N+8]} = _mm256_max_ps(vmin, vacc${M}x${ABC[N:N+8]});

    const __m256 vmax = _mm256_load_ps(params->avx.max);
    $for N in range(0, NR, 8):
      $for M in range(MR):
        vacc${M}x${ABC[N:N+8]} = _mm256_min_ps(vmax, vacc${M}x${ABC[N:N+8]});

    if XNN_LIKELY(nc >= ${NR}) {
      $for M in reversed(range(MR)):
        _mm256_storeu_ps(c${M}, vacc${M}x${ABC[0:8]});
        $for N in range(8, NR, 8):
          _mm256_storeu_ps(c${M} + ${N}, vacc${M}x${ABC[N:N+8]});
        c${M} = (float*) ((uintptr_t) c${M} + cn_stride);

      $for M in reversed(range(MR)):
        a${M} = (const float*) ((uintptr_t) a${M} - kc);

      nc -= ${NR};
    } else {
      $for LOG2N in reversed(range(NR.bit_length())):
        $if NR != 1 << LOG2N:
          if (nc & ${1 << LOG2N}) {
            $if LOG2N >= 3:
              $for M in reversed(range(MR)):
                _mm256_storeu_ps(c${M}, vacc${M}x${ABC[0:8]});
                $for N in range(8, 1 << LOG2N, 8):
                  _mm256_storeu_ps(c${M} + ${N}, vacc${M}x${ABC[N:N+8]});

              $for M in reversed(range(MR)):
                $for N in range(0, NR - (1 << LOG2N), 8):
                  vacc${M}x${ABC[N:N+8]} = vacc${M}x${ABC[N + (1 << LOG2N):N + (1 << LOG2N)+8]};

              $for M in reversed(range(MR)):
                c${M} += ${1 << LOG2N};
            $elif LOG2N == 2:
              $for M in reversed(range(MR)):
                _mm_storeu_ps(c${M}, vacc${M}x${ABC[0:4]});

              $for M in reversed(range(MR)):
                vacc${M}x${ABC[0:4]} = _mm256_extractf128_ps(vacc${M}x${ABC[0:8]}, 1);

              $for M in reversed(range(MR)):
                c${M} += 4;
            $elif LOG2N == 1:
              $for M in reversed(range(MR)):
                _mm_storel_pi((__m64*) c${M}, vacc${M}x${ABC[0:4]});

              $for M in reversed(range(MR)):
                vacc${M}x${ABC[0:4]} = _mm_movehl_ps(vacc${M}x${ABC[0:4]}, vacc${M}x${ABC[0:4]});

              $for M in reversed(range(MR)):
                c${M} += 2;
            $elif LOG2N == 0:
              $for M in reversed(range(MR)):
                _mm_store_ss(c${M}, vacc${M}x${ABC[0:4]});
          }
        $if LOG2N == 3:
          $for M in reversed(range(MR)):
            __m128 vacc${M}x${ABC[0:4]} = _mm256_castps256_ps128(vacc${M}x${ABC[0:8]});

      nc = 0;
    }
  } while (nc != 0);
}
