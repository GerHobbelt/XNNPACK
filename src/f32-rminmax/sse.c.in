// Copyright 2023 Google LLC
//
// This source code is licensed under the BSD-style license found in the
// LICENSE file in the root directory of this source tree.

$assert BATCH_TILE % 4 == 0
$assert BATCH_TILE >= 4
$SIMD_TILE = BATCH_TILE // 4
$assert ACCUMULATORS <= SIMD_TILE
$ABC = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ"
$assert OP in ["SUM", "MAX", "MIN"]
#include <assert.h>

#include <xmmintrin.h>

#include <xnnpack/common.h>
#include <xnnpack/reduce.h>


$ACC_SUFFIX = "" if ACCUMULATORS == 1 else "_acc%d" % ACCUMULATORS
$_MM_OP_PS, _MM_OP_SS = {
$  "MAX": ("_mm_max_ps", "_mm_max_ss"),
$  "MIN": ("_mm_min_ps", "_mm_min_ss"),
$}[OP]
void xnn_f32_r${OP.lower()}_ukernel__sse_x${BATCH_TILE}${ACC_SUFFIX}(
    size_t batch,
    const float* input,
    float* output,
    const union xnn_f32_default_params* params)
{
  assert(batch != 0);
  assert(batch % sizeof(float) == 0);
  assert(input != NULL);
  assert(output != NULL);

  __m128 vacc0 = _mm_load_ss(input);
  vacc0 = _mm_shuffle_ps(vacc0, vacc0, _MM_SHUFFLE(0, 0, 0, 0));
  $for A in range(1, ACCUMULATORS):
    __m128 vacc${A} = vacc0;
  $if BATCH_TILE > 4:
    for (; batch >= ${BATCH_TILE} * sizeof(float); batch -= ${BATCH_TILE} * sizeof(float)) {
      const __m128 vt0 = _mm_loadu_ps(input);
      $for N in range(1, SIMD_TILE):
        const __m128 vt${N} = _mm_loadu_ps(input + ${N * 4});
      input += ${BATCH_TILE};

      $for N in range(SIMD_TILE):
        vacc${N % ACCUMULATORS} = ${_MM_OP_PS}(vacc${N % ACCUMULATORS}, vt${N});
    }
    $if ACCUMULATORS > 1:
      $ACC_SLICE = 1
      $while ACC_SLICE < ACCUMULATORS:
        $for A in range(0, ACCUMULATORS, ACC_SLICE * 2):
          $if A + ACC_SLICE < ACCUMULATORS:
            vacc${A} = ${_MM_OP_PS}(vacc${A}, vacc${A + ACC_SLICE});
        $ACC_SLICE *= 2
  for (; batch >= 4 * sizeof(float); batch -= 4 * sizeof(float)) {
    const __m128 vt = _mm_loadu_ps(input);
    input += 4;

    vacc0 = ${_MM_OP_PS}(vacc0, vt);
  }
  if XNN_UNLIKELY(batch != 0) {
    do {
      const __m128 vt = _mm_load_ss(input);
      input += 1;
      vacc0 = ${_MM_OP_SS}(vacc0, vt);
      batch -= sizeof(float);
    } while (batch != 0);
  }
  vacc0 = ${_MM_OP_PS}(vacc0, _mm_movehl_ps(vacc0, vacc0));
  vacc0 = ${_MM_OP_SS}(vacc0, _mm_shuffle_ps(vacc0, vacc0, _MM_SHUFFLE(1, 1, 1, 1)));
  _mm_store_ss(output, vacc0);
}
