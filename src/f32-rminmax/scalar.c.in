// Copyright 2023 Google LLC
//
// This source code is licensed under the BSD-style license found in the
// LICENSE file in the root directory of this source tree.

$assert BATCH_TILE >= 1
$ABC = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ"
$assert OP in ["MAX", "MIN"]
#include <assert.h>

#include <xnnpack/common.h>
$if not WASM:
  #include <xnnpack/math.h>
#include <xnnpack/reduce.h>


$ACC_SUFFIX = "" if ACCUMULATORS == 1 else "_acc%d" % ACCUMULATORS
$OP_FUNC = {
$  "MAX": "__builtin_wasm_max_f32" if WASM else "math_max_f32",
$  "MIN": "__builtin_wasm_min_f32" if WASM else "math_min_f32",
$}[OP]
$ISA = "wasm" if WASM else "scalar"
void xnn_f32_r${OP.lower()}_ukernel__${ISA}_x${BATCH_TILE}${ACC_SUFFIX}(
    size_t batch,
    const float* input,
    float* output,
    const union xnn_f32_default_params* params)
{
  assert(batch != 0);
  assert(batch % sizeof(float) == 0);
  assert(input != NULL);
  assert(output != NULL);

  float vacc0 = *input;
  $for A in range(1, ACCUMULATORS):
    float vacc${A} = vacc0;
  $if BATCH_TILE == 1:
    do {
      const float vt = *input++;
      vacc0 = ${OP_FUNC}(vacc0, vt);
      batch -= sizeof(float);
    } while (batch != 0);
  $else:
    for (; batch >= ${BATCH_TILE} * sizeof(float); batch -= ${BATCH_TILE} * sizeof(float)) {
      $for N in range(BATCH_TILE):
        const float vt${N} = input[${N}];
      input += ${BATCH_TILE};

      $for N in range(BATCH_TILE):
        vacc${N % ACCUMULATORS} = ${OP_FUNC}(vacc${N % ACCUMULATORS}, vt${N});
    }
    $if ACCUMULATORS > 1:
      $ACC_SLICE = 1
      $while ACC_SLICE < ACCUMULATORS:
        $for A in range(0, ACCUMULATORS, ACC_SLICE * 2):
          $if A + ACC_SLICE < ACCUMULATORS:
            vacc${A} = ${OP_FUNC}(vacc${A}, vacc${A + ACC_SLICE});
        $ACC_SLICE *= 2

    if XNN_UNLIKELY(batch != 0) {
      $if BATCH_TILE == 2:
        const float vt = *input;
        vacc0 = ${OP_FUNC}(vacc0, vt);
      $else:
        do {
          const float vt = *input++;
          vacc0 = ${OP_FUNC}(vacc0, vt);
          batch -= sizeof(float);
        } while (batch != 0);
    }
  *output = vacc0;
}
