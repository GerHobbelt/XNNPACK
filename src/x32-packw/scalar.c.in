// Copyright 2023 Google LLC
//
// This source code is licensed under the BSD-style license found in the
// LICENSE file in the root directory of this source tree.

$assert NR > 1
$assert KUNROLL >= 1
$assert TYPE in ["uint32_t", "float"]

#include <assert.h>
#include <stddef.h>
#include <stdint.h>

#include <xnnpack/math.h>
#include <xnnpack/packw.h>

$TYPE_SUFFIX = {"uint32_t": "int", "float": "float"}[TYPE]


void xnn_x32_packw_gemm_goi_ukernel_x${NR}__scalar_${TYPE_SUFFIX}(
  size_t g,
  size_t nc,
  size_t kc,
  size_t nr,
  size_t kr,
  size_t sr,
  const uint32_t* weights,
  const uint32_t* bias,
  uint32_t* packed_weights,
  size_t extra_bytes,
  const void* params)
{
  assert(g != 0);
  assert(nc != 0);
  assert(kc != 0);
  assert(nr == ${NR});   // This kernel is for NR=${NR}
  assert(kr == 1);
  assert(sr == 1);
  assert(weights != NULL);
  assert(packed_weights != NULL);

  ${TYPE}* out = (${TYPE}*) packed_weights;
  const ${TYPE}* b = (const ${TYPE}*) bias;
  do {
    // NC main loop multiple of ${NR}
    const ${TYPE}* w0 = (const ${TYPE}*) weights;
    size_t n = nc;

    for (;n >= ${NR}; n -= ${NR}) {
      if XNN_LIKELY(b != NULL) {
        $for N in range(NR):
          out[${N}] = b[${N}];
        b += ${NR};
      }
      out += ${NR};

      $for N in range(1, NR):
        const ${TYPE}* w${N} = w${N-1} + kc;

      // KC main loop multiple of ${NR}x${KUNROLL}
      size_t k = kc;
      for (; k >= ${KUNROLL}; k -= ${KUNROLL}) {
        $for N in range(NR):
          $for K in range(KUNROLL):
            const ${TYPE} v${N}${K} = w${N}[${K}];
          w${N} += ${KUNROLL};
        $for K in range(KUNROLL):
          $for N in range(NR):
            out[${N+K*NR}] = v${N}${K};
        out += ${NR*KUNROLL};
      }

      // KC remainder
      for (; k != 0; --k) {
        $for N in range(NR):
          out[${N}] = *w${N}++;
        out += ${NR};
      }
      out = (${TYPE}*) ((uintptr_t) out + extra_bytes);
      w0 = w${NR-1};
    }

    if XNN_UNLIKELY(n != 0) {
      // NC remainder (1..${NR-1})
      if XNN_LIKELY(b != NULL) {
        size_t nb = n;
        do {
          *out++  = *b++;
        } while (--nb != 0);
        out += (${NR} - n);
      } else {
        out += ${NR};
      }

      $if NR > 2:
        // NR remainder has less than ${NR} rows so last row is not loaded
      $for N in range(1, NR-1):
        const ${TYPE}* w${N} = w${N-1} + kc;
        $if N % 2 == 0:
          if XNN_UNPREDICTABLE(n <= ${N}) {
            w${N} = w${N-1};
          }
        $else:
          if XNN_UNPREDICTABLE(n < ${N+1}) {
            w${N} = w${N-1};
          }

      // KC main loop multiple of ${NR}x${KUNROLL}
      size_t k = kc;
      for (; k >= ${KUNROLL}; k -= ${KUNROLL}) {
        $for N in range(NR-1):
          $for K in range(KUNROLL):
            const ${TYPE} v${N}${K} = w${N}[${K}];
          w${N} += ${KUNROLL};
        $for K in range(KUNROLL):
          $for N in range(NR-1):
            out[${N+K*NR}] = v${N}${K};
        out += ${NR*KUNROLL};
      }

      // KC remainder of 1..${KUNROLL-1}
      for (; k != 0; --k) {
        $for N in range(NR-1):
          out[${N}] = *w${N}++;
        out += ${NR};
      }
      out = (${TYPE}*) ((uintptr_t) out + extra_bytes);
    }
    weights += nc * kc;
  } while (--g != 0);
}
